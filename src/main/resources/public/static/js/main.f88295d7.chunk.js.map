{"version":3,"sources":["components/MatchDetailCard.js","components/MatchSmallCard.js","pages/TeamPage.js","components/YearSelector.js","pages/MatchPage.js","components/TeamTile.js","pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["MatchDetailCard","teamName","match","otherTeam","team1","team2","otherTeamRoute","isMatchWon","matchWinner","className","to","date","venue","resultMargin","result","playerOfMatch","umpire1","umpire2","MatchSmallCard","TeamPage","useState","matches","team","setTeam","useParams","useEffect","a","fetch","response","json","data","fetchTeam","title","value","totalMatches","totalWins","color","slice","map","id","process","YearSelector","years","i","push","year","MatchPage","setMatches","fetchMatches","TeamTile","HomePage","teams","setTeams","fetchAllTeams","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f88295d7.chunk.js","sourcesContent":["import { React } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './MatchDetailCard.scss';\r\n\r\nexport const MatchDetailCard = ({teamName, match }) => {\r\n    if (!match) return null;\r\n\r\n    const otherTeam = match.team1 === teamName ? match.team2 : match.team1;\r\n    const otherTeamRoute = `/teams/${otherTeam}`;\r\n    const isMatchWon = teamName === match.matchWinner;\r\n\r\n    return (\r\n        <div className={isMatchWon ? 'MatchDetailCard won-card' : 'MatchDetailCard lost-card'}>\r\n            <div>\r\n                <span className=\"vs\">vs</span>\r\n                <h1><Link to={otherTeamRoute}>{otherTeam}</Link></h1>\r\n                <h2 className=\"match-date\">{match.date}</h2>\r\n                <h3 className=\"match-venue\">at {match.venue}</h3>\r\n                <h3 className=\"match-result\">{match.matchWinner} won by {match.resultMargin} {match.result}</h3>\r\n            </div>\r\n            <div className=\"additional-detail\">\r\n                <h3>First Innings</h3>\r\n                <p>{match.team1}</p>\r\n                <h3>Second Innings</h3>\r\n                <p>{match.team2}</p>\r\n                <h3>Man of the Match</h3>\r\n                <p>{match.playerOfMatch}</p>\r\n                <h3>Umpires</h3>\r\n                <p>{match.umpire1}, {match.umpire2}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { React } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './MatchSmallCard.scss';\r\n\r\nexport const MatchSmallCard = ({teamName, match }) => { //Accepting a parameters & making Object Destructuring\r\n    if (!match) return null; //Telling if parameter match is null then don't do anything\r\n\r\n    const otherTeam = match.team1 === teamName ? match.team2 : match.team1;\r\n    const otherTeamRoute = `/teams/${otherTeam}`;\r\n    const isMatchWon = teamName === match.matchWinner;\r\n\r\n    return (\r\n        <div className={isMatchWon ? 'MatchSmallCard won-card' : 'MatchSmallCard lost-card'}>\r\n        <span className=\"vs\">vs</span>\r\n        <h1><Link to={otherTeamRoute}>{otherTeam}</Link></h1>\r\n        <p className=\"match-result\">{match.matchWinner} won by {match.resultMargin} {match.result}</p>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import { React, useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { MatchDetailCard } from '../components/MatchDetailCard';\r\nimport { MatchSmallCard } from '../components/MatchSmallCard';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\n\r\nimport './TeamPage.scss';\r\n\r\nexport const TeamPage = () => {\r\n\r\n  //The state is just a fancy term for a JavaScript data structure.\r\n  const [team, setTeam] = useState({ matches: [] }); //Initializing state in this component such as defining matches as an empty array & specifying state name i.e. team & function to set state i.e. setTeam\r\n  const { teamName } = useParams(); //Giving an Object with all of the PathParams & Destructuring to get teamName\r\n\r\n\r\n  useEffect( //Using React Effects to do something when this component load\r\n    () => {\r\n      const fetchTeam = async () => {\r\n        const response = await fetch(`/team/${teamName}`); //Need to make await because fetch returns promise & for using await that current function must be async\r\n        const data = await response.json(); //getting actual response\r\n        setTeam(data); //Setting available data to component state\r\n\r\n      };\r\n      fetchTeam();\r\n\r\n    }, [teamName] //Specifying DependencyList as an teamName in array to tell Calling useEffect on the teamName change\r\n  );\r\n\r\n\r\n  if (!team || !team.teamName) {\r\n    return <h1>Team not found</h1>\r\n  }\r\n\r\n  //JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods. JSX converts HTML tags into react elements. We are not required to use JSX, but JSX makes it easier to write React applications.\r\n  return (\r\n    <div className=\"TeamPage\">\r\n      <div className=\"team-name-section\">\r\n        <h1 className=\"team-name\">{team.teamName}</h1>\r\n      </div>\r\n      <div className=\"win-loss-section\">\r\n        Wins / Losses\r\n        <PieChart\r\n          data={[\r\n            { title: 'Losses', value: team.totalMatches - team.totalWins, color: '#a34d5d' },\r\n            { title: 'Wins', value: team.totalWins, color: '#4da375' },\r\n          ]}\r\n        />\r\n      </div>\r\n      <div className=\"match-detail-section\">\r\n        <h3>Latest Matches</h3>\r\n        <MatchDetailCard teamName={team.teamName} match={team.matches[0]}></MatchDetailCard>\r\n      </div>\r\n      {team.matches.slice(1).map(match => <MatchSmallCard key={match.id} teamName={team.teamName} match={match}></MatchSmallCard>)}\r\n      <div className=\"more-link\">\r\n        <Link to={`/teams/${teamName}/matches/${process.env.REACT_APP_DATA_END_YEAR}`}>More ></Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { React } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './YearSelector.scss';\r\n\r\nexport const YearSelector = ({ teamName }) => {\r\n\r\n    let years = [];\r\n    const startYear = process.env.REACT_APP_DATA_START_YEAR;\r\n    const endYear = process.env.REACT_APP_DATA_END_YEAR;\r\n\r\n    for (let i = startYear; i <= endYear; i++) {\r\n        years.push(i);\r\n    }\r\n\r\n    return (\r\n        <ol className=\"YearSelector\">\r\n            {years.map(year => (\r\n                <li key={year}>\r\n                    <Link to={`/teams/${teamName}/matches/${year}`}>{year}</Link>\r\n                </li>)\r\n            )}\r\n        </ol>\r\n    );\r\n}\r\n","import { React, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { MatchDetailCard } from '../components/MatchDetailCard';\r\nimport { YearSelector } from '../components/YearSelector';\r\n\r\nimport './MatchPage.scss';\r\n\r\nexport const MatchPage = () => {\r\n\r\n  const [matches, setMatches] = useState([]);\r\n  const {teamName, year } = useParams();\r\n\r\n\r\n  useEffect( //Using React Effects to do something when this component load\r\n    () => {\r\n      const fetchMatches = async () => {\r\n        const response = await fetch(`/team/${teamName}/matches?year=${year}`); //Need to make await because fetch returns promise & for using await that current function must be async\r\n        const data = await response.json(); //getting actual response\r\n        setMatches(data); //Setting available data to component state\r\n\r\n      };\r\n      fetchMatches();\r\n\r\n    }, [teamName, year] //Specifying DependencyList as teamName, year in array to tell Calling useEffect on the teamName or year change\r\n  );\r\n\r\n\r\n  //JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods. JSX converts HTML tags into react elements. We are not required to use JSX, but JSX makes it easier to write React applications.\r\n  return (\r\n    <div className=\"MatchPage\">\r\n      <div className=\"year-selector\">\r\n        <h3>Select Year</h3>\r\n        <YearSelector teamName={teamName}></YearSelector>\r\n      </div>\r\n      <div>\r\n        <h1 className=\"page-heading\">{teamName} Matches in {year}</h1>\r\n        {\r\n          matches.map(match => <MatchDetailCard key={match.id} teamName={teamName} match={match}></MatchDetailCard>)\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { React } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './TeamTile.scss';\r\n\r\nexport const TeamTile = ({teamName}) => {\r\n\r\n    return (\r\n        <div className=\"TeamTile\">\r\n            <h1>\r\n                <Link to={`/teams/${teamName}`}>\r\n                    {teamName}\r\n                </Link>\r\n            </h1>\r\n        </div>\r\n    );\r\n}","import { React, useEffect, useState } from 'react';\r\n\r\nimport './HomePage.scss';\r\nimport { TeamTile } from '../components/TeamTile';\r\n\r\nexport const HomePage = () => {\r\n\r\n    //The state is just a fancy term for a JavaScript data structure.\r\n    const [teams, setTeams] = useState([]); //Initializing state in this component as an empty array & specifying state name i.e. teams & function to set state i.e. setTeams\r\n\r\n\r\n    useEffect( //Using React Effects to do something when this component load\r\n        () => {\r\n            const fetchAllTeams = async () => {\r\n                const response = await fetch(`/team`); //Need to make await because fetch returns promise & for using await that current function must be async\r\n                const data = await response.json(); //getting actual response\r\n                setTeams(data); //Setting available data to component state\r\n\r\n            };\r\n            fetchAllTeams();\r\n\r\n        }, [] //Specifying DependencyList as an empty array to tell Calling useEffect on the first page load\r\n    );\r\n\r\n\r\n    if(!teams) return null;\r\n\r\n    //JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods. JSX converts HTML tags into react elements. We are not required to use JSX, but JSX makes it easier to write React applications.\r\n    return (\r\n        <div className=\"HomePage\">\r\n            <div className=\"header-section\">\r\n                <h1 className=\"app-name\">JSN IPL Dashboard</h1>\r\n            </div>\r\n            <div className=\"team-grid\">\r\n                    {teams.map(team => <TeamTile key={team.id} teamName={team.teamName}></TeamTile>)}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import './App.scss';\nimport { TeamPage } from './pages/TeamPage';\nimport { MatchPage } from './pages/MatchPage';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport { HomePage } from './pages/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/teams/:teamName\">\n            <TeamPage></TeamPage>\n          </Route>\n          <Route exact path=\"/teams/:teamName/matches/:year\">\n            <MatchPage></MatchPage>\n          </Route>\n          <Route exact path=\"/\">\n            <HomePage></HomePage>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}